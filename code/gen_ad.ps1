param( # Parameter help description
[Parameter(Mandatory = $false)]
[string]$JSONFile = ".\data\ad_schema.json",

[Parameter(Mandatory = $false)]
[switch]$Remove
)

function Add-ADGroup {
    param ([Parameter(Mandatory=$true)] $groupname)
    New-ADGroup -name $groupname -GroupScope Global
}


function Add-ADUser {
    param([Parameter(Mandatory=$true)] $userObject)

    $name = $userObject.name
    $password = $userObject.password

    $firstname, $lastname = $name.split(" ")
    $username = ($firstname[0] + $lastname).ToLower()

    New-ADUser  -Name $name -GivenName $firstname -Surname $lastname -SamAccountName $username -UserPrincipalName $username@$Global:Domain -AccountPassword (ConvertTo-SecureString $password -AsPlainText -Force) -PassThru | Enable-ADAccount 
    


    ForEach ( $group in $userObject.groups )  {
        try {
            Get-ADGroup -Identity $group
            Add-ADGroupMember -Identity $group -Members $username
        }
        catch [Microsoft.ActiveDirectory.Management.ADIdentityNotFoundException]
        {
            Write-Warning "User $name NOT added to group $group because $group could not be found"
        }
    }

    $add_command="net localgroup administrators $Global:Domain\$username /add"
    ForEach ($hostname in $userObject.local_admin){
        Invoke-Command -Computer $hostname -ScriptBlock { $add_command }
    }
}

function Switch-PasswordPolicy {
    param (
        [Parameter(Mandatory = $false)]
        [switch]$Remove
    )

    $secpolfile = "C:\Users\Administrator\Documents\secpol.cfg"
    
    if($Remove) {
        secedit /export /cfg $secpolfile
        (Get-Content $secpolfile).Replace("PasswordComplexity = 0", "PasswordComplexity = 1").Replace("MinimumPasswordLength = 1", "MinimumPasswordLength = 7") | Set-Content $secpolfile
        secedit /configure /db C:\Windows\security\database\secedit.sdb /cfg $secpolfile /areas SECURITYPOLICY
        Remove-Item -force $secpolfile -Confirm:$false
    }
    else {
        secedit /export /cfg $secpolfile
        (Get-Content $secpolfile).Replace("PasswordComplexity = 1", "PasswordComplexity = 0").Replace("MinimumPasswordLength = 7", "MinimumPasswordLength = 1") | Set-Content $secpolfile
        secedit /configure /db C:\Windows\security\database\secedit.sdb /cfg $secpolfile /areas SECURITYPOLICY
        Remove-Item -force $secpolfile -Confirm:$false
    }
    
}

$json = ( Get-Content $JSONFile | ConvertFrom-Json )
$Global:Domain = $json.domain

if($Remove) {
    Switch-PasswordPolicy -Remove
}
else {
    Switch-PasswordPolicy
}

ForEach ( $group in $json.groups) {
    if($Remove) {
        Remove-ADGroup $group -Confirm:$false
    }
    else {
        Add-ADGroup $group
    }
}

ForEach ( $user in $json.users ){
    if($Remove) {
        $firstname, $lastname = $user.name.split(" ")
        $username = ($firstname[0] + $lastname).ToLower()
        Remove-ADUser $username -Confirm:$false
    }
    else {
        Add-ADUser $user
    }
}
