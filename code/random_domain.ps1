param(
[Parameter(Mandatory = $false)]
[string]$Domain = "DVSNet.local",

[Parameter(Mandatory = $false)]
[string]$TotalGroups = 10,

[Parameter(Mandatory = $false)]
[string]$TotalUsers = 100,

[Parameter(Mandatory = $false)]
[string]$MaxUserGroups = 4,

[Parameter(Mandatory = $false)]
[string]$OutputJSONFile = "./data/ad_schema.json"
)




$groups = [System.Collections.ArrayList](Get-Content "data/group_names.txt")
$first_names = [System.Collections.ArrayList](Get-Content "data/first_names.txt")
$last_names = [System.Collections.ArrayList](Get-Content "data/last_names.txt")
$weak_passwords = [System.Collections.ArrayList](Get-Content "data/weak_passwords.txt")

$total = $groups.Count - $TotalGroups
for ($i = 1; $i -le $total; $i++) {
    $groups.Remove((Get-Random -InputObject $groups))
}

#set up user values
[System.Collections.ArrayList]$users = @()
$num_strongpass = Get-random -Maximum ([int][Math]::Floor($TotalUsers / 10))
[System.Collections.ArrayList]$strong_passwords = @()
for ($i = 1; $i -le $num_strongpass; $i++) {
    $strong_passlength = (Get-Random -Minimum 8 -Maximum 15)
    $num_spechars = (Get-Random -Maximum ([int]($strong_passlength / 2)) -Minimum 1)
    Add-Type -AssemblyName 'System.Web'
    [void]$strong_passwords.Add([System.Web.Security.Membership]::GeneratePassword($strong_passlength, $num_spechars))
}

$num_weakpass = $TotalUsers - $num_strongpass
$passwords = [System.Collections.ArrayList]((Get-Random -InputObject $weak_passwords -Count $num_weakpass) + $strong_passwords)

#generate users
:genuser for ($i = 1; $i -le $TotalUsers; $i++) {
    $first_name = (Get-Random -InputObject $first_names)
    $last_name = (Get-Random -InputObject $last_names)
    $password = (Get-Random -InputObject $passwords)
    [string[]]$usergroups = (Get-Random -InputObject $groups -Count (Get-Random -Minimum 1 -Maximum $MaxUserGroups))
    $user = @{
        "name"="$first_name $last_name"
        "password"="$password"
        "groups"=$usergroups
    }
    [void]$users.Add($user)
    $first_names.Remove($first_name)
    $last_names.Remove($last_name)
    $passwords.Remove($password)
}

ConvertTo-Json -InputObject @{
    "domain"=$Domain
    "groups"=([string[]]$groups)
    "users"=$users
} -Depth 4 | Out-File $OutputJSONFile